{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GOVS G enome O ptimization via V irtual S imulation Overview of GOVS GOVS ( G enome O ptimization via V irtual S imulation) is an integrative R package for maize breeding that streamlines genome optimization via virtual simulation achieve guidance of lines selection and population development. GOVS describes a promising strategy that can help breeders to select materials in a purposeful and directional manner, with the purpose of enabling breeders to combine others technologies with rapidly genetic gain benefit by genome optimization.Above figure illustrate the framework of GOVS, GOVS consists of four main modules: Genome optimization module for virtual simulation of optimal genome. Extraction & assembly module for extraction and assembly of virtual genome. Statistic module for contribution statistic of virtual genome. Genome prediction module for genotype-to-phenotype prediction of optimal genome. Download link : GOVS_1.0.tar.gz Github : GOVS QuickStart : GOVS QuickStart Reference Manual : Reference Manual Cite Contact us : qchengray@gmail.com Note : cademic users can download directly, industrial users first contact us.","title":"Home"},{"location":"#govs","text":"G enome O ptimization via V irtual S imulation Overview of GOVS GOVS ( G enome O ptimization via V irtual S imulation) is an integrative R package for maize breeding that streamlines genome optimization via virtual simulation achieve guidance of lines selection and population development. GOVS describes a promising strategy that can help breeders to select materials in a purposeful and directional manner, with the purpose of enabling breeders to combine others technologies with rapidly genetic gain benefit by genome optimization.Above figure illustrate the framework of GOVS, GOVS consists of four main modules: Genome optimization module for virtual simulation of optimal genome. Extraction & assembly module for extraction and assembly of virtual genome. Statistic module for contribution statistic of virtual genome. Genome prediction module for genotype-to-phenotype prediction of optimal genome. Download link : GOVS_1.0.tar.gz Github : GOVS QuickStart : GOVS QuickStart Reference Manual : Reference Manual Cite Contact us : qchengray@gmail.com Note : cademic users can download directly, industrial users first contact us.","title":"GOVS"},{"location":"QuickStart/","text":"Quickstart Quickstart and examples of main functions This section briefly introduces some typical examples of GOVS to help users get started quickly. Detailes and other functions of GOVS,please see Tutorial or Reference Manual . Installation 1. Github install ## install dependencies and GOVS install.packages(c(\"ggplot2\",\"rrBLUP\",\"lsmeans\",\"readr\",\"pbapply\",\"pheatmap\",\"emmeas\")) require(\"devtools\") install_github(\"GOVS-pack/GOVS\") ## if you want build vignette in GOVS install_github(\"GOVS-pack/GOVS\",build_vignettes = TRUE) 2. Download .tar.gz package and install Download link: GOVS_1.0.tar.gz ## install dependencies and GOVS with bult-in vignette install.packages(c(\"ggplot2\",\"rrBLUP\",\"lsmeans\",\"readr\",\"pbapply\",\"pheatmap\",\"emmeas\")) install.packages(\"DownloadPath/GOVS_1.0.tar.gz\") Data preparation GOVS typically started with four types data Genotypic data (hapmap format,matrix). SNP rs must coded with pattern \"chr[0-9].s/_[0-9]*\" (eg: chr1.s_4831, \"1\" for chromosome, \"4831\" for locus). Genotypic data Phenotypic data (dataframe), first column is lines ID. Phenotypic data Bins data (matrix), each row represents a bin (reconbination fragment) and each column represents a progeny, contents represent the origins of the bins tracing back to the parental lines. Bins data Bins information data (dataframe) corresponding to bins data, consists of five columns (bin ID, chromsome, start position, end position and length of each bin). Bins information data NOTE: The header of bins, the first column of phenotype and the header of genotype must be unified, we recommend unify these ID with patrental ID. Run GOVS ## Not run ! ## load test data # Phenotypic data: data(phe) # genomic data: data(MZ) # bins data: data(bins) # bins information: data(binsInfo) # example for one-stop solution for GOVS GOVS_res <- GOVS(MZ,pheno = phe,trait = \"EW\",which = \"max\",bins = bins, binsInfo = binsInfo,module = \"DES\") Output of GOVS: A list or several files (if output is defined). $GORes Genome optimization results. $virtualGenome A matrix involves of three optimal virtual genomes. $statRes A data frame regarding statistics results of virtual simulation. Lines Lines Bins(#) The number (#) of bins that a line contributed to the simulated genome. Bins(%) The number of bins that a line contributed accounting for the proportion (%) of simulated genome. Fragments(%) The total length of genomic fragments that a line contributed accounting for the proportion (%) of simulated genome. phenotype The phenotypic value of the corresponding lines or their offspring. phenotypeRank The phenotype rank. Cumulative(%) The cumulative percentage of fragments contributing to the simulated genome. Statistic summary of GOVS Run genotytpe-to-phenotype prediciton (rrBLUP) This function performs genotpye-to-phenotype prediciton via ridge regression best linear unbiased prediction (rrBLUP) model ( Endelman, 2011 ). The inputs is genotypeic data. ## Not run! ## load hapmap data (genomic data) of MZ hybrids data(MZ) ## load phenotypic data of MZ hybrids data(phe) ## pre-process for G2P prediction rownames(MZ) <- MZ[,1] MZ <- MZ[,-c(1:11)] MZ.t <- t(MZ) ## conversion MZ.n <- transHapmap2numeric(MZ.t) dim(MZ.t) ## prediction idx1 <- sample(1:1404,1000) idx2 <- setdiff(1:1404,idx1) predRes <- SNPrrBLUP(MZ.n,phe$EW,idx1,idx2,fix = NULL,model = FALSE) Construct bin map IBD map was constructed of contributions from the parents onto the progeny lines discribed by Liu et al. ( Liu et al. , 2020 ) based hidden Markov model (HMM) ( Mott et al. , 2020 ) . Here we take chromosome-10 of one offspring as an example. ## load example data data(IBDTestData) ## compute rou from genetic position rou = IBDTestData$posGenetic rou = diff(rou) rou = ifelse(rou<0,0,rou) ## constract IBD map of chr10 for one progeny IBDRes <- IBDConstruct(snpParents = IBDTestData$snpParents, markerInfo = IBDTestData$markerInfo, snpProgeny = IBDTestData$snpProgeny,q = 0.97,G = 9,rou = rou) Output of IBDConstruct: A list regarding constructed bin map. bin Results of IBD analysis, each row represents a bin fragment. binsInfo Data frame, including bins index, start, end, length of bins locus. Visualization of IBD map results ## load example data data(IBDTestData) ## compute rou from genetic position rou = IBDTestData$posGenetic rou = diff(rou) rou = ifelse(rou<0,0,rou) ## constract IBD map of chr10 for one progeny IBDRes <- IBDConstruct(snpParents = IBDTestData$snpParents, markerInfo = IBDTestData$markerInfo, snpProgeny = IBDTestData$snpProgeny,q = 0.97,G = 9,rou = rou) ## plot # color color <- c(\"#DA053F\",\"#FC0393\",\"#C50F84\",\"#D870D4\",\"#DCA0DC\",\"#4A0380\", \"#9271D9\",\"#0414FB\",\"#2792FC\",\"#4883B2\",\"#2CFFFE\",\"#138B8A\", \"#42B373\",\"#9BFB9C\",\"#84FF2F\",\"#566B32\",\"#FED62D\",\"#FD8A21\", \"#F87E75\",\"#B01D26\",\"#7E0006\",\"#A9A9A9\",\"#FFFE34\",\"#FEBFCB\") names(color) <- 1:24 # parent label parentInfo <- c(\"5237\",\"E28\",\"Q1261\",\"CHANG7-2\",\"DAN340\",\"HUANGC\",\"HYS\", \"HZS\",\"TY4\",\"ZI330\",\"ZONG3\",\"LX9801\",\"XI502\",\"81515\", \"F349\",\"H21\",\"JI853\",\"JI53\",\"LV28\",\"YUANFH\",\"SHUANG741\", \"K12\",\"NX110\",\"ZONG31\") names(parentInfo) <- 1:24 # plot binsPlot(IBDRes,color,parentInfo,24) Bins map plot Visualization of overall bins data Take chromosome-1 and first 200 progeny as an example. ## load data data(bins) data(binsInfo) ## color color <- c(\"#DA053F\",\"#FC0393\",\"#C50F84\",\"#D870D4\",\"#DCA0DC\",\"#4A0380\", \"#9271D9\",\"#0414FB\",\"#2792FC\",\"#4883B2\",\"#2CFFFE\",\"#138B8A\", \"#42B373\",\"#9BFB9C\",\"#84FF2F\",\"#566B32\",\"#FED62D\",\"#FD8A21\", \"#F87E75\",\"#B01D26\",\"#7E0006\",\"#A9A9A9\",\"#FFFE34\",\"#FEBFCB\") mosaicPlot(bins = bins,binsInfo = binsInfo,chr = 1,resolution = 500, color = color, list = colnames(bins)[1:200]) Bins mosaic plot References Endelman, J. B. (2011). Ridge regression and other kernels for genomic selection with R package rrBLUP. The plant genome , 4 (3) https://doi.org/10.3835/plantgenome2011.08.0024 Mott, R., Talbot, C. J., Turri, M. G., Collins, A. C., & Flint, J. (2000). A method for fine mapping quantitative trait loci in outbred animal stocks. Proceedings of the National Academy of Sciences , 97 (23), 12649-12654. https://doi.org/10.1073/pnas.230304397 Liu H J, Wang X, Xiao Y, et al. (2020) CUBIC: an atlas of genetic architecture promises directed maize improvement[J]. Genome biology , 21 (1): 1-17. https://doi.org/10.1186/s13059-020-1930-x","title":"QuickStart"},{"location":"QuickStart/#quickstart","text":"Quickstart and examples of main functions This section briefly introduces some typical examples of GOVS to help users get started quickly. Detailes and other functions of GOVS,please see Tutorial or Reference Manual .","title":"Quickstart"},{"location":"QuickStart/#installation","text":"","title":"Installation"},{"location":"QuickStart/#1-github-install","text":"## install dependencies and GOVS install.packages(c(\"ggplot2\",\"rrBLUP\",\"lsmeans\",\"readr\",\"pbapply\",\"pheatmap\",\"emmeas\")) require(\"devtools\") install_github(\"GOVS-pack/GOVS\") ## if you want build vignette in GOVS install_github(\"GOVS-pack/GOVS\",build_vignettes = TRUE)","title":"1. Github install"},{"location":"QuickStart/#2-download-targz-package-and-install","text":"Download link: GOVS_1.0.tar.gz ## install dependencies and GOVS with bult-in vignette install.packages(c(\"ggplot2\",\"rrBLUP\",\"lsmeans\",\"readr\",\"pbapply\",\"pheatmap\",\"emmeas\")) install.packages(\"DownloadPath/GOVS_1.0.tar.gz\")","title":"2. Download .tar.gz package and install"},{"location":"QuickStart/#data-preparation","text":"","title":"Data preparation"},{"location":"QuickStart/#govs-typically-started-with-four-types-data","text":"Genotypic data (hapmap format,matrix). SNP rs must coded with pattern \"chr[0-9].s/_[0-9]*\" (eg: chr1.s_4831, \"1\" for chromosome, \"4831\" for locus). Genotypic data Phenotypic data (dataframe), first column is lines ID. Phenotypic data Bins data (matrix), each row represents a bin (reconbination fragment) and each column represents a progeny, contents represent the origins of the bins tracing back to the parental lines. Bins data Bins information data (dataframe) corresponding to bins data, consists of five columns (bin ID, chromsome, start position, end position and length of each bin). Bins information data","title":"GOVS typically started with four types data"},{"location":"QuickStart/#note-the-header-of-bins-the-first-column-of-phenotype-and-the-header-of-genotype-must-be-unified-we-recommend-unify-these-id-with-patrental-id","text":"","title":" NOTE: The header of bins, the first column of phenotype and the header of genotype must be unified, we recommend unify these ID with patrental ID. "},{"location":"QuickStart/#run-govs","text":"## Not run ! ## load test data # Phenotypic data: data(phe) # genomic data: data(MZ) # bins data: data(bins) # bins information: data(binsInfo) # example for one-stop solution for GOVS GOVS_res <- GOVS(MZ,pheno = phe,trait = \"EW\",which = \"max\",bins = bins, binsInfo = binsInfo,module = \"DES\")","title":"Run GOVS"},{"location":"QuickStart/#output-of-govs","text":"","title":"Output of GOVS:"},{"location":"QuickStart/#a-list-or-several-files-if-output-is-defined","text":"$GORes Genome optimization results. $virtualGenome A matrix involves of three optimal virtual genomes. $statRes A data frame regarding statistics results of virtual simulation. Lines Lines Bins(#) The number (#) of bins that a line contributed to the simulated genome. Bins(%) The number of bins that a line contributed accounting for the proportion (%) of simulated genome. Fragments(%) The total length of genomic fragments that a line contributed accounting for the proportion (%) of simulated genome. phenotype The phenotypic value of the corresponding lines or their offspring. phenotypeRank The phenotype rank. Cumulative(%) The cumulative percentage of fragments contributing to the simulated genome. Statistic summary of GOVS","title":"A list or several files (if output is defined)."},{"location":"QuickStart/#run-genotytpe-to-phenotype-prediciton-rrblup","text":"This function performs genotpye-to-phenotype prediciton via ridge regression best linear unbiased prediction (rrBLUP) model ( Endelman, 2011 ). The inputs is genotypeic data. ## Not run! ## load hapmap data (genomic data) of MZ hybrids data(MZ) ## load phenotypic data of MZ hybrids data(phe) ## pre-process for G2P prediction rownames(MZ) <- MZ[,1] MZ <- MZ[,-c(1:11)] MZ.t <- t(MZ) ## conversion MZ.n <- transHapmap2numeric(MZ.t) dim(MZ.t) ## prediction idx1 <- sample(1:1404,1000) idx2 <- setdiff(1:1404,idx1) predRes <- SNPrrBLUP(MZ.n,phe$EW,idx1,idx2,fix = NULL,model = FALSE)","title":"Run genotytpe-to-phenotype prediciton (rrBLUP)"},{"location":"QuickStart/#construct-bin-map","text":"IBD map was constructed of contributions from the parents onto the progeny lines discribed by Liu et al. ( Liu et al. , 2020 ) based hidden Markov model (HMM) ( Mott et al. , 2020 ) . Here we take chromosome-10 of one offspring as an example. ## load example data data(IBDTestData) ## compute rou from genetic position rou = IBDTestData$posGenetic rou = diff(rou) rou = ifelse(rou<0,0,rou) ## constract IBD map of chr10 for one progeny IBDRes <- IBDConstruct(snpParents = IBDTestData$snpParents, markerInfo = IBDTestData$markerInfo, snpProgeny = IBDTestData$snpProgeny,q = 0.97,G = 9,rou = rou)","title":"Construct bin map"},{"location":"QuickStart/#output-of-ibdconstruct","text":"","title":"Output of IBDConstruct:"},{"location":"QuickStart/#a-list-regarding-constructed-bin-map","text":"bin Results of IBD analysis, each row represents a bin fragment. binsInfo Data frame, including bins index, start, end, length of bins locus.","title":"A list regarding constructed bin map."},{"location":"QuickStart/#visualization-of-ibd-map-results","text":"## load example data data(IBDTestData) ## compute rou from genetic position rou = IBDTestData$posGenetic rou = diff(rou) rou = ifelse(rou<0,0,rou) ## constract IBD map of chr10 for one progeny IBDRes <- IBDConstruct(snpParents = IBDTestData$snpParents, markerInfo = IBDTestData$markerInfo, snpProgeny = IBDTestData$snpProgeny,q = 0.97,G = 9,rou = rou) ## plot # color color <- c(\"#DA053F\",\"#FC0393\",\"#C50F84\",\"#D870D4\",\"#DCA0DC\",\"#4A0380\", \"#9271D9\",\"#0414FB\",\"#2792FC\",\"#4883B2\",\"#2CFFFE\",\"#138B8A\", \"#42B373\",\"#9BFB9C\",\"#84FF2F\",\"#566B32\",\"#FED62D\",\"#FD8A21\", \"#F87E75\",\"#B01D26\",\"#7E0006\",\"#A9A9A9\",\"#FFFE34\",\"#FEBFCB\") names(color) <- 1:24 # parent label parentInfo <- c(\"5237\",\"E28\",\"Q1261\",\"CHANG7-2\",\"DAN340\",\"HUANGC\",\"HYS\", \"HZS\",\"TY4\",\"ZI330\",\"ZONG3\",\"LX9801\",\"XI502\",\"81515\", \"F349\",\"H21\",\"JI853\",\"JI53\",\"LV28\",\"YUANFH\",\"SHUANG741\", \"K12\",\"NX110\",\"ZONG31\") names(parentInfo) <- 1:24 # plot binsPlot(IBDRes,color,parentInfo,24) Bins map plot","title":"Visualization of IBD map results"},{"location":"QuickStart/#visualization-of-overall-bins-data","text":"Take chromosome-1 and first 200 progeny as an example. ## load data data(bins) data(binsInfo) ## color color <- c(\"#DA053F\",\"#FC0393\",\"#C50F84\",\"#D870D4\",\"#DCA0DC\",\"#4A0380\", \"#9271D9\",\"#0414FB\",\"#2792FC\",\"#4883B2\",\"#2CFFFE\",\"#138B8A\", \"#42B373\",\"#9BFB9C\",\"#84FF2F\",\"#566B32\",\"#FED62D\",\"#FD8A21\", \"#F87E75\",\"#B01D26\",\"#7E0006\",\"#A9A9A9\",\"#FFFE34\",\"#FEBFCB\") mosaicPlot(bins = bins,binsInfo = binsInfo,chr = 1,resolution = 500, color = color, list = colnames(bins)[1:200]) Bins mosaic plot","title":"Visualization of overall bins data"},{"location":"QuickStart/#references","text":"Endelman, J. B. (2011). Ridge regression and other kernels for genomic selection with R package rrBLUP. The plant genome , 4 (3) https://doi.org/10.3835/plantgenome2011.08.0024 Mott, R., Talbot, C. J., Turri, M. G., Collins, A. C., & Flint, J. (2000). A method for fine mapping quantitative trait loci in outbred animal stocks. Proceedings of the National Academy of Sciences , 97 (23), 12649-12654. https://doi.org/10.1073/pnas.230304397 Liu H J, Wang X, Xiao Y, et al. (2020) CUBIC: an atlas of genetic architecture promises directed maize improvement[J]. Genome biology , 21 (1): 1-17. https://doi.org/10.1186/s13059-020-1930-x","title":"References"},{"location":"Tutorial/","text":"Tutorial Function introduction and parameter information In this section, the functions in GOVS and thier parameters will be introducted in details. GOVS GOVS Description One-stop function for a complete progress of genome optimization Usage GOVS(hmp,ID = NULL,pheno,trait,bins,binsInfo,output,module = \"DES\",designInfo = NULL) Arguments hmp The genetic data in hapmap format. ID A character array regarding sample IDs for hmp , if NULL, the hmp data must involve header. pheno Phenotypic data frame, the first column describes sample IDs. trait The names of interest trait (The trait must be included in Pheno data frame). bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. binsInfo Data frame, including bins index, start, end, length of bins locus. output The prefix of output files. module Character represents the module combination for analysis, default \"DES\", \"D\" for genome optimization module, \"E\" for extraction & assembly module. \"S\" for statistic module. \"D\",\"E\",\"S\",\"DE\",\"DES\" and \"ES\" are alternative for different module combinations. Note that different combination need different essential inputs, details see genomeOptimization extractGenome statDesign . designInfo Data frame, the results of genome optimization module, it's necessary for \"ES\" and \"S\" module. Genome optimization module genomeOptimization Description Virtual genome optimization based IBD(bins) data Usage genomeOptimization(pheno, bins, trait, output) Arguments Pheno Phenotypic data frame, the first column describes sample names. bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. trait The names of interest trait (The trait must be included in Pheno data frame). output The prefix of output files regarding the scheme of virtual genome. Extraction and assembly module extractGenome Description Extracting genome fragment from candidates based the results of genome optimization and then assembling all fragments so that produce optimized genome(virtual genome). Usage extractGenome(hmp,binInfo,ID = NULL,designInfo,output,write = F,bins,extractContent =\"Genotype\") Arguments hmp The genetic data in hapmap format. binInfo Data frame, including bins index, start, end, length of bins locus. ID A character array regarding sample IDs for hmp , if NULL, the hmp data must involve header. designInfo Outputs of [ genomeOptimization ]{#genome-optimization-module}, a matrix consists of sample IDs regarding the fragment source among condidates at each bin locus. write Boolean, if write the assembled genome to file, default FALSE. bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. extractContent Character, the content of virtual genome, \"Bin\" for bin source well \"Genotype\" for genetic data, default \"Genotype\". Statistic module statDesign Description Statistic summary for analysis of the contribution of all candidates to optimal genome. The results directly guide the lines selection and population improvement route. Usage statDesign(designInfo,binInfo,pheno,trait,output) Arguments designInfo Outputs of genomeOptimization , a matrix consists of sample IDs regarding the fragment source among condidates at each bin locus. binInfo Data frame, including bins index, start, end, length of bins locus. pheno Phenotypic data frame, the first column describes sample names. trait The names of interest trait (The trait must be included in Pheno data frame). output The prefix of output files regarding the summary and statistic infomation via the process of genome optimization. Genome selection prediciton module rrBLUP model SNPrrBLUP Description Genotpye-to-phenotype prediciton via ridge regression best linear unbiased prediction (rrBLUP) model. The inputs is genotypes. Usage SNPrrBLUP(x,y,fix = NULL,idx1,idx2) Arguments x Genotypic matrix in numberic format (See transHapmap2numeric ), row represents sample well column represents feature (SNP). y An numeric array of phenotype. fix A matrix containing other variables as fixed effects in mixed model. idx1 An array of index for training set idx2 An array of index for testing (predicted) set GBLUP model GBLUP Description Genotpye-to-phenotype prediciton via genomic best linear unbiased prediction (GBLUP) model. The inputs is genotypes. Usage GBLUP(amat,y,idx1,idx2,fix = NULL) Arguments amat Additive relationship matrix, which compute from genetic matrix. y An numeric array of phenotype. fix A matrix containing other variables as fixed effects in mixed model. idx1 An array of index for training set idx2 An array of index for testing (predicted) set Bins map construction and visualization Construct IBD map IBDConstruct Description A IBD map was constructed of contributions from the parents onto the progeny lines using a hidden Markov model (HMM). Usage IBDConstruct(snpParents,snpProgeny,markerInfo,q,rou,G,threshold = NULL,omit = T) Arguments snpParents A matrix for the parents' genotype, lines in column and marker in row. snpProgeny An array for the progeny' genotype, marker number must equal to snpParents. markerInfo A matrix or dataframe with four cols(marker ID, allele, chromsome and physical position) regarding genotypic information. q The quality of sequencing, range 0 to 1 to define the quality of marker. rou Correlations between any pairs of flanking markers, that estimated with the offspring-LD level after corrected by parent-LD level, it can be obtained by genetic location. G Generations that the offsprings decented from the parents. threshold The threshold of posterior. omit Whether to omit untraceable segments, default True. Bins map construction and visualization Visualization of IBD map results binsPlot Description Visualization of IBD map results. Usage binsPlot(IBDRes,color,parentInfo,parentNum) Arguments IBDRes The results of IBDConstruct, see IBDConstruct . color A named vector for defining color of parents. parentInfo A named vector for defining label of parents. parentNum The number of parents. Visualization of bins data mosaicPlot Description Visualization of overall bins data Usage mosaicPlot(bins,binsInfo,chr,resolution = 500,list,parentNum = 24,color,clust = T,methods = \"ward.D2\",dist_method = \"euclidean\") Arguments bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. binsInfo Data frame, including bins index, start, end, length of bins locus. chr Which chromesome will be used to plot mosaic. resolution To set the resolution of mosaic plot, default 500. list The names of lines to visualize mosaic plot. parentNum The number of parent, if color not defined, this parameter is used to auto generate color palette. color A array to define color palette. clust Boolean values determining if lines should be hclust object. methods Clustering method used. dist_method The distance measure to be used for clustering. Orther useful functions Transform character to number transHapmap2numeric Description This function help users to transform genetic matrix from character format to numeric format. AA-0, Aa-1, aa-2, A is major allele and a is minor allele. Usage transHapmap2numeric(G) Arguments G Genetic matrix of character, row represents sample and column represents SNP. Computation of GCA gcaCompute Description Calculate parental general combining ability (GCA) based F1 phenotypic values. Usage gcaCompute(phe_df,which,trait) Arguments phe_df Phenotypic data frame, row represents F1 combination and includes the paternal information in columns. which The column index of male or female to compute parternal or maternal GCA. trait A character string to define which trait GCA will be computed, this function support two or more phenotypic GCA be computed at the same time. Computation of SCA scaCompute Description Calculate hybrid special combining ability (SCA) based F1 phenotypic values. Usage scaCompute(phe_df,which_male,which_female,trait,seqname) Arguments phe_df Phenotypic data frame, row represents F1 combination and includes the paternal information in columns. which_male The column index of paternal IDs. which_female The column index of maternal IDs. trait A character string to define which trait GCA will be computed, this function support two or more phenotypic GCA be computed at the same time. seqname A character array regarding hybrid IDs Distribution correction reviseFunc Description Scale two sets of data to a uniform distribution. Usage reviseFunc(ori,aim,cut = 10,sample_names) Arguments ori A numeric array, as reference for correction. aim A numeric array, which is the object to implement correction. cut Number of intervals to cut, default 10. sample_names A character array consits of aim 's name.","title":"Tutorial"},{"location":"Tutorial/#tutorial","text":"Function introduction and parameter information In this section, the functions in GOVS and thier parameters will be introducted in details.","title":"Tutorial"},{"location":"Tutorial/#govs","text":"GOVS Description One-stop function for a complete progress of genome optimization Usage GOVS(hmp,ID = NULL,pheno,trait,bins,binsInfo,output,module = \"DES\",designInfo = NULL) Arguments hmp The genetic data in hapmap format. ID A character array regarding sample IDs for hmp , if NULL, the hmp data must involve header. pheno Phenotypic data frame, the first column describes sample IDs. trait The names of interest trait (The trait must be included in Pheno data frame). bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. binsInfo Data frame, including bins index, start, end, length of bins locus. output The prefix of output files. module Character represents the module combination for analysis, default \"DES\", \"D\" for genome optimization module, \"E\" for extraction & assembly module. \"S\" for statistic module. \"D\",\"E\",\"S\",\"DE\",\"DES\" and \"ES\" are alternative for different module combinations. Note that different combination need different essential inputs, details see genomeOptimization extractGenome statDesign . designInfo Data frame, the results of genome optimization module, it's necessary for \"ES\" and \"S\" module.","title":"GOVS"},{"location":"Tutorial/#genome-optimization-module","text":"genomeOptimization Description Virtual genome optimization based IBD(bins) data Usage genomeOptimization(pheno, bins, trait, output) Arguments Pheno Phenotypic data frame, the first column describes sample names. bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. trait The names of interest trait (The trait must be included in Pheno data frame). output The prefix of output files regarding the scheme of virtual genome.","title":"Genome optimization module"},{"location":"Tutorial/#extraction-and-assembly-module","text":"extractGenome Description Extracting genome fragment from candidates based the results of genome optimization and then assembling all fragments so that produce optimized genome(virtual genome). Usage extractGenome(hmp,binInfo,ID = NULL,designInfo,output,write = F,bins,extractContent =\"Genotype\") Arguments hmp The genetic data in hapmap format. binInfo Data frame, including bins index, start, end, length of bins locus. ID A character array regarding sample IDs for hmp , if NULL, the hmp data must involve header. designInfo Outputs of [ genomeOptimization ]{#genome-optimization-module}, a matrix consists of sample IDs regarding the fragment source among condidates at each bin locus. write Boolean, if write the assembled genome to file, default FALSE. bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. extractContent Character, the content of virtual genome, \"Bin\" for bin source well \"Genotype\" for genetic data, default \"Genotype\".","title":"Extraction and assembly module"},{"location":"Tutorial/#statistic-module","text":"statDesign Description Statistic summary for analysis of the contribution of all candidates to optimal genome. The results directly guide the lines selection and population improvement route. Usage statDesign(designInfo,binInfo,pheno,trait,output) Arguments designInfo Outputs of genomeOptimization , a matrix consists of sample IDs regarding the fragment source among condidates at each bin locus. binInfo Data frame, including bins index, start, end, length of bins locus. pheno Phenotypic data frame, the first column describes sample names. trait The names of interest trait (The trait must be included in Pheno data frame). output The prefix of output files regarding the summary and statistic infomation via the process of genome optimization.","title":"Statistic module"},{"location":"Tutorial/#genome-selection-prediciton-module","text":"","title":"Genome selection prediciton module"},{"location":"Tutorial/#rrblup-model","text":"SNPrrBLUP Description Genotpye-to-phenotype prediciton via ridge regression best linear unbiased prediction (rrBLUP) model. The inputs is genotypes. Usage SNPrrBLUP(x,y,fix = NULL,idx1,idx2) Arguments x Genotypic matrix in numberic format (See transHapmap2numeric ), row represents sample well column represents feature (SNP). y An numeric array of phenotype. fix A matrix containing other variables as fixed effects in mixed model. idx1 An array of index for training set idx2 An array of index for testing (predicted) set","title":"rrBLUP model"},{"location":"Tutorial/#gblup-model","text":"GBLUP Description Genotpye-to-phenotype prediciton via genomic best linear unbiased prediction (GBLUP) model. The inputs is genotypes. Usage GBLUP(amat,y,idx1,idx2,fix = NULL) Arguments amat Additive relationship matrix, which compute from genetic matrix. y An numeric array of phenotype. fix A matrix containing other variables as fixed effects in mixed model. idx1 An array of index for training set idx2 An array of index for testing (predicted) set","title":"GBLUP model"},{"location":"Tutorial/#bins-map-construction-and-visualization","text":"","title":"Bins map construction and visualization"},{"location":"Tutorial/#construct-ibd-map","text":"IBDConstruct Description A IBD map was constructed of contributions from the parents onto the progeny lines using a hidden Markov model (HMM). Usage IBDConstruct(snpParents,snpProgeny,markerInfo,q,rou,G,threshold = NULL,omit = T) Arguments snpParents A matrix for the parents' genotype, lines in column and marker in row. snpProgeny An array for the progeny' genotype, marker number must equal to snpParents. markerInfo A matrix or dataframe with four cols(marker ID, allele, chromsome and physical position) regarding genotypic information. q The quality of sequencing, range 0 to 1 to define the quality of marker. rou Correlations between any pairs of flanking markers, that estimated with the offspring-LD level after corrected by parent-LD level, it can be obtained by genetic location. G Generations that the offsprings decented from the parents. threshold The threshold of posterior. omit Whether to omit untraceable segments, default True.","title":"Construct IBD map"},{"location":"Tutorial/#bins-map-construction-and-visualization_1","text":"","title":"Bins map construction and visualization"},{"location":"Tutorial/#visualization-of-ibd-map-results","text":"binsPlot Description Visualization of IBD map results. Usage binsPlot(IBDRes,color,parentInfo,parentNum) Arguments IBDRes The results of IBDConstruct, see IBDConstruct . color A named vector for defining color of parents. parentInfo A named vector for defining label of parents. parentNum The number of parents.","title":"Visualization of IBD map results"},{"location":"Tutorial/#visualization-of-bins-data","text":"mosaicPlot Description Visualization of overall bins data Usage mosaicPlot(bins,binsInfo,chr,resolution = 500,list,parentNum = 24,color,clust = T,methods = \"ward.D2\",dist_method = \"euclidean\") Arguments bins Results of IBD analysis (bins matrix), each row represents a bin fragment as well as each column represents each sample. binsInfo Data frame, including bins index, start, end, length of bins locus. chr Which chromesome will be used to plot mosaic. resolution To set the resolution of mosaic plot, default 500. list The names of lines to visualize mosaic plot. parentNum The number of parent, if color not defined, this parameter is used to auto generate color palette. color A array to define color palette. clust Boolean values determining if lines should be hclust object. methods Clustering method used. dist_method The distance measure to be used for clustering.","title":"Visualization of bins data"},{"location":"Tutorial/#orther-useful-functions","text":"","title":"Orther useful functions"},{"location":"Tutorial/#transform-character-to-number","text":"transHapmap2numeric Description This function help users to transform genetic matrix from character format to numeric format. AA-0, Aa-1, aa-2, A is major allele and a is minor allele. Usage transHapmap2numeric(G) Arguments G Genetic matrix of character, row represents sample and column represents SNP.","title":"Transform character to number"},{"location":"Tutorial/#computation-of-gca","text":"gcaCompute Description Calculate parental general combining ability (GCA) based F1 phenotypic values. Usage gcaCompute(phe_df,which,trait) Arguments phe_df Phenotypic data frame, row represents F1 combination and includes the paternal information in columns. which The column index of male or female to compute parternal or maternal GCA. trait A character string to define which trait GCA will be computed, this function support two or more phenotypic GCA be computed at the same time.","title":"Computation of GCA"},{"location":"Tutorial/#computation-of-sca","text":"scaCompute Description Calculate hybrid special combining ability (SCA) based F1 phenotypic values. Usage scaCompute(phe_df,which_male,which_female,trait,seqname) Arguments phe_df Phenotypic data frame, row represents F1 combination and includes the paternal information in columns. which_male The column index of paternal IDs. which_female The column index of maternal IDs. trait A character string to define which trait GCA will be computed, this function support two or more phenotypic GCA be computed at the same time. seqname A character array regarding hybrid IDs","title":"Computation of SCA"},{"location":"Tutorial/#distribution-correction","text":"reviseFunc Description Scale two sets of data to a uniform distribution. Usage reviseFunc(ori,aim,cut = 10,sample_names) Arguments ori A numeric array, as reference for correction. aim A numeric array, which is the object to implement correction. cut Number of intervals to cut, default 10. sample_names A character array consits of aim 's name.","title":"Distribution correction"},{"location":"about/","text":"About Release note, update log and others Authors Qian Cheng Shuqin Jiang Xiangfeng Wang Maintenance Qian Cheng Version 1.0 (2021-08-26)","title":"About"},{"location":"about/#about","text":"Release note, update log and others","title":"About"},{"location":"about/#authors","text":"Qian Cheng Shuqin Jiang Xiangfeng Wang","title":"Authors"},{"location":"about/#maintenance","text":"Qian Cheng","title":"Maintenance"},{"location":"about/#version-10-2021-08-26","text":"","title":"Version 1.0 (2021-08-26)"}]}